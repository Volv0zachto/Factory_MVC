using Xunit;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Materials.Controllers;
using Materials.Models;
using Materials.Data;
using System;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Security.Claims;
using Microsoft.AspNetCore.Http;

public class MaterialRecordsControllerTests
{
    private MaterialRecordsController GetControllerWithDbContext()
    {
        var options = new DbContextOptionsBuilder<ApplicationDbContext>()
            .UseInMemoryDatabase(databaseName: "TestMaterialRecordsDatabase")
            .Options;

        var context = new ApplicationDbContext(options);
        context.Database.EnsureDeleted(); // –û—á–∏—â–∞–µ–º –±–∞–∑—É –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
        context.Database.EnsureCreated();

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        var material = new Material { MaterialId = 1, Name = "–ë—É–º–∞–≥–∞", Unit = "–ª–∏—Å—Ç", Quantity = 50 };
        var equipment = new Equipment { EquipmentId = 1, Name = "–ü—Ä–∏–Ω—Ç–µ—Ä" };
        var user = new User { UserId = 1, UserName = "admin", Password = "password123" };

        var materialRecords = new List<MaterialRecord>
        {
            new MaterialRecord { RecordId = 1, MaterialId = 1, EquipmentId = 1, UserId = 1, Quantity = 5, RecordDate = DateTime.UtcNow.AddDays(-5) }
        };

        context.Materials.Add(material);
        context.Equipments.Add(equipment);
        context.Users.Add(user);
        context.MaterialRecords.AddRange(materialRecords);
        context.SaveChanges();

        var controller = new MaterialRecordsController(context);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–Ω—É—Ç—ã–π `HttpContext` —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        var claims = new List<Claim> { new Claim(ClaimTypes.Name, "admin") };
        var identity = new ClaimsIdentity(claims, "TestAuth");
        var userPrincipal = new ClaimsPrincipal(identity);

        var httpContext = new DefaultHttpContext { User = userPrincipal };
        controller.ControllerContext = new ControllerContext { HttpContext = httpContext };

        return controller;
    }

    [Fact]
    public async Task Index_ReturnsViewWithMaterialRecords()
    {
        // Arrange
        var controller = GetControllerWithDbContext();

        // Act
        var result = await controller.Index() as ViewResult;
        var model = result?.Model as List<MaterialRecord>;

        // –í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ—Å—Ç-–∫–µ–π—Å–∞
        Console.WriteLine("\n=== –¢–ï–°–¢-–ö–ï–ô–°: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —Ä–∞—Å—Ö–æ–¥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ===");
        Console.WriteLine($"[üîµ –û–∂–∏–¥–∞–ª–æ—Å—å] 1 –∑–∞–ø–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ");
        Console.WriteLine($"[‚úÖ –ü–æ–ª—É—á–µ–Ω–æ] {model?.Count} –∑–∞–ø–∏—Å–µ–π");

        if (model != null)
        {
            foreach (var item in model)
            {
                Console.WriteLine($"[‚úÖ –ó–∞–ø–∏—Å—å] –ú–∞—Ç–µ—Ä–∏–∞–ª: {item.MaterialId}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.Quantity}, –î–∞—Ç–∞: {item.RecordDate}");
            }
        }

        // Assert
        Assert.NotNull(result);
        Assert.NotNull(model);
        Assert.Single(model);
    }

    [Fact]
    public async Task Create_AddsNewMaterialRecord()
    {
        // Arrange
        var controller = GetControllerWithDbContext();
        var newRecord = new MaterialRecord { MaterialId = 1, EquipmentId = 1, UserId = 1, Quantity = 10, RecordDate = DateTime.UtcNow };

        // Act
        await controller.Create(newRecord);
        var result = await controller.Index() as ViewResult;
        var model = result?.Model as List<MaterialRecord>;

        // –í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ—Å—Ç-–∫–µ–π—Å–∞
        Console.WriteLine("\n=== –¢–ï–°–¢-–ö–ï–ô–°: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞ ===");
        Console.WriteLine($"[üîµ –û–∂–∏–¥–∞–ª–æ—Å—å] 2 –∑–∞–ø–∏—Å–∏ –≤ —Å–∏—Å—Ç–µ–º–µ");
        Console.WriteLine($"[‚úÖ –ü–æ–ª—É—á–µ–Ω–æ] {model?.Count} –∑–∞–ø–∏—Å–µ–π");

        if (model != null)
        {
            foreach (var item in model)
            {
                Console.WriteLine($"[‚úÖ –ó–∞–ø–∏—Å—å] –ú–∞—Ç–µ—Ä–∏–∞–ª: {item.MaterialId}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.Quantity}, –î–∞—Ç–∞: {item.RecordDate}");
            }
        }

        // Assert
        Assert.NotNull(result);
        Assert.NotNull(model);
        Assert.Equal(2, model.Count);
    }

    [Fact]
public async Task Delete_RemovesMaterialRecordAndRestoresMaterialQuantity()
{
    // Arrange
    var controller = GetControllerWithDbContext();
    var context = new ApplicationDbContext(new DbContextOptionsBuilder<ApplicationDbContext>()
        .UseInMemoryDatabase(databaseName: "TestMaterialRecordsDatabase")
        .Options);

    var record = context.MaterialRecords.Find(1);
    if (record == null)
    {
        Console.WriteLine("[‚ùå –û—à–∏–±–∫–∞] –ó–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å ID 1 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.");
        Assert.Fail("MaterialRecord —Å ID 1 –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–µ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω.");
        return;
    }

    double originalQuantity = context.Materials.Find(1).Quantity;
    double recordQuantity = record.Quantity;

    Console.WriteLine("\n=== –¢–ï–°–¢-–ö–ï–ô–°: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞ ===");
    Console.WriteLine($"[üîµ –ü—Ä–æ–≤–µ—Ä–∫–∞] –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {originalQuantity}");
    Console.WriteLine($"[üîµ –ü—Ä–æ–≤–µ—Ä–∫–∞] –ó–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ: {recordQuantity}");

    // Act
    Console.WriteLine("[üîµ –í—ã–∑–æ–≤] –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏...");
    await controller.Delete(1);
    Console.WriteLine("[‚úÖ –í—ã–∑–æ–≤] –ú–µ—Ç–æ–¥ Delete() –∑–∞–≤–µ—Ä—à—ë–Ω!");

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π `context`, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    var updatedContext = new ApplicationDbContext(new DbContextOptionsBuilder<ApplicationDbContext>()
        .UseInMemoryDatabase(databaseName: "TestMaterialRecordsDatabase")
        .Options);

    var updatedMaterial = updatedContext.Materials.Find(1);
    var remainingRecords = updatedContext.MaterialRecords.Count();

    Console.WriteLine($"[üîµ –û–∂–∏–¥–∞–ª–æ—Å—å] 0 –∑–∞–ø–∏—Å–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ, [‚úÖ –ü–æ–ª—É—á–µ–Ω–æ] {remainingRecords}");
    Console.WriteLine($"[üîµ –û–∂–∏–¥–∞–ª–æ—Å—å] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {originalQuantity} + {recordQuantity} = {originalQuantity + recordQuantity}");
    Console.WriteLine($"[‚úÖ –ü–æ–ª—É—á–µ–Ω–æ] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {updatedMaterial?.Quantity ?? -1}");

    // Assert
    Assert.NotNull(updatedMaterial);
    Assert.Equal(originalQuantity + recordQuantity, updatedMaterial.Quantity);
    Assert.Empty(updatedContext.MaterialRecords);
}


}
