using Xunit;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Materials.Controllers;
using Materials.Models;
using Materials.Data;
using System;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace Materials.Tests
{
    public class UsersControllerTests
    {
        private UsersController GetControllerWithDbContext()
        {
            var options = new DbContextOptionsBuilder<ApplicationDbContext>()
                .UseInMemoryDatabase(databaseName: "TestUsersDatabase")
                .Options;

            var context = new ApplicationDbContext(options);
            context.Database.EnsureDeleted();
            context.Database.EnsureCreated();

            
            var adminRole = new Role { RoleId = 1, Name = "Admin" };
            var bossRole = new Role { RoleId = 2, Name = "Boss" };
            var accountantRole = new Role { RoleId = 3, Name = "Accountant" };
            context.Roles.AddRange(adminRole, bossRole, accountantRole);
            context.SaveChanges();

            
            var user1 = new User
                { UserId = 1, UserName = "AdminUser", Password = "12345", RoleId = 1, Role = adminRole };
            var user2 = new User
                { UserId = 2, UserName = "BossUser", Password = "qwerty", RoleId = 2, Role = bossRole };
            context.Users.AddRange(user1, user2);
            context.SaveChanges();

            return new UsersController(context);
        }

        [Fact]
        public async Task Index_ReturnsViewWithUsers()
        {
            // Arrange
            var controller = GetControllerWithDbContext();

            // Act
            var result = await controller.Index() as ViewResult;
            var model = result?.Model as List<User>;

            Console.WriteLine("\n=== –¢–ï–°–¢-–ö–ï–ô–°: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===");
            Console.WriteLine($"[üîµ –û–∂–∏–¥–∞–ª–æ—Å—å] 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ");
            Console.WriteLine($"[‚úÖ –ü–æ–ª—É—á–µ–Ω–æ] {model?.Count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");

            if (model != null)
            {
                foreach (var item in model)
                {
                    Console.WriteLine($"[‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] {item.UserName}, –†–æ–ª—å: {item.Role.Name}");
                }
            }

            // Assert
            Assert.NotNull(result);
            Assert.NotNull(model);
            Assert.Equal(2, model.Count);
        }

        [Fact]
        public async Task Create_AddsNewUser()
        {
            // Arrange
            var controller = GetControllerWithDbContext();
            var newUser = new User { UserId = 3, UserName = "AccountantUser", Password = "password", RoleId = 3 };

            // Act
            Console.WriteLine("\n=== –¢–ï–°–¢-–ö–ï–ô–°: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===");
            var result = await controller.Index() as ViewResult;
            var model = result?.Model as List<User>;
            Console.WriteLine($"[‚úÖ –ü–æ–ª—É—á–µ–Ω–æ] {model?.Count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");

            await controller.Create(newUser);
            result = await controller.Index() as ViewResult;
            model = result?.Model as List<User>;
            Console.WriteLine($"[üîµ –û–∂–∏–¥–∞–ª–æ—Å—å] 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ");
            Console.WriteLine($"[‚úÖ –ü–æ–ª—É—á–µ–Ω–æ] {model?.Count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");

            if (model != null)
            {
                foreach (var item in model)
                {
                    Console.WriteLine($"[‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] {item.UserName}, –†–æ–ª—å: {item.RoleId}");
                }
            }

            // Assert
            Assert.NotNull(result);
            Assert.NotNull(model);
            Assert.Equal(3, model.Count);
            Assert.Contains(model, u => u.UserName == "AccountantUser");
        }

        [Fact]
        public async Task Delete_RemovesUser()
        {
           
            var controller = GetControllerWithDbContext();

           
            var initialResult = await controller.Index() as ViewResult;
            var initialModel = initialResult?.Model as List<User>;

            Console.WriteLine("\n=== –¢–ï–°–¢-–ö–ï–ô–°: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===");
            Console.WriteLine("[üîµ –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ] –î–æ —É–¥–∞–ª–µ–Ω–∏—è:");
            if (initialModel != null)
            {
                foreach (var item in initialModel)
                {
                    Console.WriteLine($"[üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] {item.UserName}, –†–æ–ª—å: {item.RoleId}");
                }
            }

           
            await controller.Delete(1);

            
            var result = await controller.Index() as ViewResult;
            var model = result?.Model as List<User>;

            Console.WriteLine("[üîµ –ò–∑–º–µ–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ] –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:");
            Console.WriteLine($"[üîµ –û–∂–∏–¥–∞–ª–æ—Å—å] 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ");
            Console.WriteLine($"[‚úÖ –ü–æ–ª—É—á–µ–Ω–æ] {model?.Count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");

            if (model != null)
            {
                foreach (var item in model)
                {
                    Console.WriteLine($"[‚úÖ –û—Å—Ç–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] {item.UserName}, –†–æ–ª—å: {item.RoleId}");
                }
            }

          
            Assert.NotNull(result);
            Assert.NotNull(model);
            Assert.Single(model);
            Assert.DoesNotContain(model, u => u.UserId == 1);
        }

        
        [Fact]
        public async Task Edit_UpdatesUser()
        {
          
            var controller = GetControllerWithDbContext();

            
            var resultBeforeEdit = await controller.Index() as ViewResult;
            var modelBeforeEdit = resultBeforeEdit?.Model as List<User>;
            var userToEdit = modelBeforeEdit?.FirstOrDefault(u => u.UserId == 1);
    
            if (userToEdit == null)
            {
                Assert.Fail("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID=1 –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–µ—Å—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.");
                return;
            }

            Console.WriteLine("\n=== –¢–ï–°–¢-–ö–ï–ô–°: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===");
            Console.WriteLine($"[üìå –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] {userToEdit.UserName}");

            
            userToEdit.UserName = "UpdatedAdmin";

            await controller.Edit(userToEdit);

          
            var resultAfterEdit = await controller.Index() as ViewResult;
            var modelAfterEdit = resultAfterEdit?.Model as List<User>;
            var updatedUser = modelAfterEdit?.FirstOrDefault(u => u.UserId == 1);

            Console.WriteLine($"[üîµ –û–∂–∏–¥–∞–ª–æ—Å—å] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID=1 —Ç–µ–ø–µ—Ä—å 'UpdatedAdmin'");
            Console.WriteLine($"[‚úÖ –ü–æ–ª—É—á–µ–Ω–æ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID=1 —Ç–µ–ø–µ—Ä—å '{updatedUser?.UserName}'");

            Assert.NotNull(updatedUser);
            Assert.Equal("UpdatedAdmin", updatedUser.UserName);
        }


    }
}