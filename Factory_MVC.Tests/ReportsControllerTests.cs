using Xunit;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Materials.Controllers;
using Materials.Models;
using Materials.Data;
using System;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using Materials.ViewModels;

public class ReportsControllerTests
{
    private ReportsController GetControllerWithDbContext()
    {
        var options = new DbContextOptionsBuilder<ApplicationDbContext>()
            .UseInMemoryDatabase(databaseName: "TestReportsDatabase")
            .Options;

        var context = new ApplicationDbContext(options);
        context.Database.EnsureDeleted();
        context.Database.EnsureCreated();

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        var material = new Material { MaterialId = 1, Name = "–ë—É–º–∞–≥–∞", Unit = "–ª–∏—Å—Ç" };
        var equipment = new Equipment { EquipmentId = 1, Name = "–ü—Ä–∏–Ω—Ç–µ—Ä" };
        var user = new User { UserId = 1, UserName = "admin", Password = "password123" };

        var materialRecords = new List<MaterialRecord>
        {
            new MaterialRecord { RecordId = 1, MaterialId = 1, EquipmentId = 1, UserId = 1, Quantity = 5, RecordDate = DateTime.UtcNow.AddDays(-5) },
            new MaterialRecord { RecordId = 2, MaterialId = 1, EquipmentId = 1, UserId = 1, Quantity = 10, RecordDate = DateTime.UtcNow.AddDays(-3) },
            new MaterialRecord { RecordId = 3, MaterialId = 1, EquipmentId = 1, UserId = 1, Quantity = 15, RecordDate = DateTime.UtcNow.AddDays(-1) }
        };

        context.Materials.Add(material);
        context.Equipments.Add(equipment);
        context.Users.Add(user);
        context.MaterialRecords.AddRange(materialRecords);
        context.SaveChanges();

        return new ReportsController(context);
    }

    [Fact]
    public async Task MaterialUsageReport_ReturnsCorrectData()
    {
        // Arrange
        var controller = GetControllerWithDbContext();
        DateTime startDate = DateTime.UtcNow.AddDays(-7);
        DateTime endDate = DateTime.UtcNow;

        // Act
        var result = await controller.MaterialUsageReport(startDate, endDate) as ViewResult;
        var model = result?.Model as List<MaterialUsageReportViewModel>;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –∫–∞–∫ —Ç–µ—Å—Ç-–∫–µ–π—Å
        Console.WriteLine("\n=== –¢–ï–°–¢-–ö–ï–ô–°: –û—Ç—á—ë—Ç –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ===");
        Console.WriteLine($"[üîµ –û–∂–∏–¥–∞–ª–æ—Å—å] 1 –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –æ—Ç—á—ë—Ç–µ");
        Console.WriteLine($"[‚úÖ –ü–æ–ª—É—á–µ–Ω–æ] {model?.Count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤");
        
        if (model != null && model.Count > 0)
        {
            foreach (var item in model)
            {
                Console.WriteLine($"[üîµ –û–∂–∏–¥–∞–ª–æ—Å—å] –ú–∞—Ç–µ—Ä–∏–∞–ª: '–ë—É–º–∞–≥–∞', –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: 30 –ª–∏—Å—Ç–æ–≤");
                Console.WriteLine($"[‚úÖ –ü–æ–ª—É—á–µ–Ω–æ] –ú–∞—Ç–µ—Ä–∏–∞–ª: '{item.Material.Name}', –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {item.TotalUsed} {item.Material.Unit}");
            }
        }
        else
        {
            Console.WriteLine("[‚ùå –û—à–∏–±–∫–∞] –û—Ç—á—ë—Ç –ø—É—Å—Ç! –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        }

        // Assert
        Assert.NotNull(result);
        Assert.NotNull(model);
        Assert.Single(model);
        Assert.Equal(30, model[0].TotalUsed);
    }

    [Fact]
    public async Task AverageMaterialConsumptionReport_CalculatesCorrectly()
    {
        // Arrange
        var controller = GetControllerWithDbContext();
        DateTime startDate = DateTime.UtcNow.AddDays(-7);
        DateTime endDate = DateTime.UtcNow;

        // Act
        var result = await controller.AverageMaterialConsumptionReport(startDate, endDate) as ViewResult;
        var model = result?.Model as List<AverageMaterialConsumptionReportViewModel>;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –∫–∞–∫ —Ç–µ—Å—Ç-–∫–µ–π—Å
        Console.WriteLine("\n=== –¢–ï–°–¢-–ö–ï–ô–°: –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ===");
        Console.WriteLine($"[üîµ –û–∂–∏–¥–∞–ª–æ—Å—å] 1 –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –æ—Ç—á—ë—Ç–µ");
        Console.WriteLine($"[‚úÖ –ü–æ–ª—É—á–µ–Ω–æ] {model?.Count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤");

        if (model != null && model.Count > 0)
        {
            foreach (var item in model)
            {
                double expectedAvg = 30 / 7.0;
                Console.WriteLine($"[üîµ –û–∂–∏–¥–∞–ª–æ—Å—å] –ú–∞—Ç–µ—Ä–∏–∞–ª: '–ë—É–º–∞–≥–∞', –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: 30 –ª–∏—Å—Ç–æ–≤, –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ –≤ –¥–µ–Ω—å: {expectedAvg:F2}");
                Console.WriteLine($"[‚úÖ –ü–æ–ª—É—á–µ–Ω–æ] –ú–∞—Ç–µ—Ä–∏–∞–ª: '{item.Material.Name}', –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {item.TotalUsed} {item.Material.Unit}, –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ –≤ –¥–µ–Ω—å: {item.AverageConsumptionPerDay:F2}");
            }
        }
        else
        {
            Console.WriteLine("[‚ùå –û—à–∏–±–∫–∞] –û—Ç—á—ë—Ç –ø—É—Å—Ç! –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        }

        // Assert
        Assert.NotNull(result);
        Assert.NotNull(model);
        Assert.Single(model);
        Assert.Equal(30, model[0].TotalUsed);
        Assert.Equal(30 / 7.0, model[0].AverageConsumptionPerDay, 2);
    }
}
