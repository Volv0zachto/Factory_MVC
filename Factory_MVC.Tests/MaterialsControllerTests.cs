using Xunit;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Materials.Controllers;
using Materials.Models;
using Materials.Data;
using System;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;

public class MaterialsControllerTests
{
    private MaterialsController GetControllerWithDbContext()
    {
        var options = new DbContextOptionsBuilder<ApplicationDbContext>()
            .UseInMemoryDatabase(databaseName: "TestMaterialsDatabase")
            .Options;

        var context = new ApplicationDbContext(options);
        context.Database.EnsureDeleted();
        context.Database.EnsureCreated();

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        var material1 = new Material { MaterialId = 1, Name = "–ë—É–º–∞–≥–∞", Unit = "–ª–∏—Å—Ç", Quantity = 50 };
        var material2 = new Material { MaterialId = 2, Name = "–ß–µ—Ä–Ω–∏–ª–∞", Unit = "–º–ª", Quantity = 100 };

        context.Materials.AddRange(material1, material2);
        context.SaveChanges();

        return new MaterialsController(context);
    }

    [Fact]
    public async Task Index_ReturnsViewWithMaterials()
    {
        // Arrange
        var controller = GetControllerWithDbContext();

        // Act
        var result = await controller.Index() as ViewResult;
        var model = result?.Model as List<Material>;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –∫–∞–∫ —Ç–µ—Å—Ç-–∫–µ–π—Å
        Console.WriteLine("\n=== –¢–ï–°–¢-–ö–ï–ô–°: –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ===");
        Console.WriteLine($"[üîµ –û–∂–∏–¥–∞–ª–æ—Å—å] 2 –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ —Å–ø–∏—Å–∫–µ");
        Console.WriteLine($"[‚úÖ –ü–æ–ª—É—á–µ–Ω–æ] {model?.Count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤");

        if (model != null)
        {
            foreach (var item in model)
            {
                Console.WriteLine($"[‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª] {item.Name}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.Quantity} {item.Unit}");
            }
        }
        else
        {
            Console.WriteLine("[‚ùå –û—à–∏–±–∫–∞] –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—É—Å—Ç!");
        }

        // Assert
        Assert.NotNull(result);
        Assert.NotNull(model);
        Assert.Equal(2, model.Count);
    }

    [Fact]
    public async Task Create_AddsNewMaterial()
    {
        // Arrange
        var controller = GetControllerWithDbContext();
        var newMaterial = new Material { MaterialId = 3, Name = "–ö–∞—Ä—Ç—Ä–∏–¥–∂", Unit = "—à—Ç", Quantity = 2 };

        // Act
        await controller.Create(newMaterial);
        var result = await controller.Index() as ViewResult;
        var model = result?.Model as List<Material>;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –∫–∞–∫ —Ç–µ—Å—Ç-–∫–µ–π—Å
        Console.WriteLine("\n=== –¢–ï–°–¢-–ö–ï–ô–°: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ ===");
        Console.WriteLine($"[üîµ –û–∂–∏–¥–∞–ª–æ—Å—å] 3 –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ —Å–ø–∏—Å–∫–µ");
        Console.WriteLine($"[‚úÖ –ü–æ–ª—É—á–µ–Ω–æ] {model?.Count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤");

        if (model != null)
        {
            foreach (var item in model)
            {
                Console.WriteLine($"[‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª] {item.Name}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.Quantity} {item.Unit}");
            }
        }

        // Assert
        Assert.NotNull(result);
        Assert.NotNull(model);
        Assert.Equal(3, model.Count);
        Assert.Contains(model, m => m.Name == "–ö–∞—Ä—Ç—Ä–∏–¥–∂" && m.Quantity == 2);
    }

    [Fact]
    public async Task Delete_RemovesMaterial()
    {
        // Arrange
        var controller = GetControllerWithDbContext();
    
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –î–û —É–¥–∞–ª–µ–Ω–∏—è
        var initialResult = await controller.Index() as ViewResult;
        var initialModel = initialResult?.Model as List<Material>;

        Console.WriteLine("\n=== –¢–ï–°–¢-–ö–ï–ô–°: –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ ===");
        if (initialModel != null)
        {
            foreach (var item in initialModel)
            {
                Console.WriteLine($"[üîµ –ú–∞—Ç–µ—Ä–∏–∞–ª] {item.Name}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.Quantity} {item.Unit}");
            }
        }

        // Act
        await controller.Delete(1);

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ü–û–°–õ–ï —É–¥–∞–ª–µ–Ω–∏—è
        var result = await controller.Index() as ViewResult;
        var model = result?.Model as List<Material>;

        Console.WriteLine("[üîµ –ò–∑–º–µ–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ] –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:");
        Console.WriteLine($"[üîµ –û–∂–∏–¥–∞–ª–æ—Å—å] 1 –º–∞—Ç–µ—Ä–∏–∞–ª –≤ —Å–ø–∏—Å–∫–µ (–≤–º–µ—Å—Ç–æ 2)");
        Console.WriteLine($"[‚úÖ –ü–æ–ª—É—á–µ–Ω–æ] {model?.Count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤");

        if (model != null)
        {
            foreach (var item in model)
            {
                Console.WriteLine($"[‚úÖ –û—Å—Ç–∞–ª—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª] {item.Name}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.Quantity} {item.Unit}");
            }
        }

        // Assert
        Assert.NotNull(result);
        Assert.NotNull(model);
        Assert.Single(model);
        Assert.DoesNotContain(model, m => m.MaterialId == 1);
    }

    [Fact]
    public async Task IncreaseQuantity_UpdatesMaterialQuantity()
    {
        // Arrange
        var controller = GetControllerWithDbContext();
        int materialId = 1;
        double addedQuantity = 20;

        // Act
        var result = await controller.Index() as ViewResult;
        var model = result?.Model as List<Material>;
        var updatedMaterial = model?.FirstOrDefault(m => m.MaterialId == materialId);
        Console.WriteLine("\n=== –¢–ï–°–¢-–ö–ï–ô–°: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ ===");

        Console.WriteLine($"[‚úÖ –ü–æ–ª—É—á–µ–Ω–æ]  –ú–∞—Ç–µ—Ä–∏–∞–ª '{updatedMaterial?.Name}'  {updatedMaterial?.Quantity} {updatedMaterial?.Unit}");
        await controller.IncreaseQuantity(materialId, addedQuantity);
        result = await controller.Index() as ViewResult;
        model = result?.Model as List<Material>;
        updatedMaterial = model?.FirstOrDefault(m => m.MaterialId == materialId);
        // –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –∫–∞–∫ —Ç–µ—Å—Ç-–∫–µ–π—Å
        Console.WriteLine($"[üîµ –û–∂–∏–¥–∞–ª–æ—Å—å] –£ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ '–ë—É–º–∞–≥–∞' –¥–æ–ª–∂–Ω–æ —Å—Ç–∞—Ç—å 70 –ª–∏—Å—Ç–æ–≤ (50+20)");
        Console.WriteLine($"[‚úÖ –ü–æ–ª—É—á–µ–Ω–æ]  –ú–∞—Ç–µ—Ä–∏–∞–ª '{updatedMaterial?.Name}'  {updatedMaterial?.Quantity} {updatedMaterial?.Unit}");

        // Assert
        Assert.NotNull(result);
        Assert.NotNull(model);
        Assert.Equal(70, updatedMaterial?.Quantity);
    }
}
